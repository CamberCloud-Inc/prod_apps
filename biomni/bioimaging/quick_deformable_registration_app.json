{
  "name": "biomni-quick-deformable-registration",
  "title": "Biomni: Quick Deformable Registration",
  "description": "Quick deformable (B-spline) registration of medical images using SimpleITK",
  "content": "<h3>Overview</h3><p>Deformable registration enables non-linear alignment of medical images by computing spatially varying transformations that can model complex anatomical deformations. This tool implements B-spline-based deformable registration using SimpleITK, allowing local tissue deformations while maintaining spatial smoothness. Unlike rigid and affine registration, deformable registration can capture subtle anatomical variations, organ motion, and pathological changes, making it essential for precision medicine applications requiring voxel-level anatomical correspondence.</p><h3>Input Parameters</h3><ul><li><strong>fixed_image_path</strong> (string, required): Path to the reference/fixed image file in NIfTI format (.nii or .nii.gz) defining the target coordinate space</li><li><strong>moving_image_path</strong> (string, required): Path to the moving image file in NIfTI format (.nii or .nii.gz) to be non-linearly registered</li><li><strong>output_dir</strong> (string, required): Directory where registered images, deformation fields, and visualizations will be saved</li><li><strong>metric</strong> (string, optional): Similarity metric for optimization - 'mutual_information', 'mean_squares', or 'correlation'. Default: 'mutual_information'</li><li><strong>optimizer</strong> (string, optional): Optimization algorithm - 'gradient_descent', 'lbfgsb', or 'amoeba'. Default: 'gradient_descent'</li><li><strong>preprocess</strong> (boolean, optional): Enable preprocessing (denoising and normalization) before registration. Default: true</li><li><strong>create_visualizations</strong> (boolean, optional): Generate before/after comparison visualizations showing deformation. Default: true</li><li><strong>learning_rate</strong> (number, optional): Step size for gradient descent optimizer. Default: 0.01</li><li><strong>number_of_iterations</strong> (integer, optional): Maximum number of optimization iterations. Default: 100</li><li><strong>gradient_convergence_tolerance</strong> (number, optional): Convergence threshold for stopping optimization. Default: 1e-6</li><li><strong>number_of_control_points</strong> (integer, optional): Grid density for B-spline control points (higher = more flexible deformation). Default: 4</li></ul><h3>Biological Use Case</h3><p>Deformable registration is critical for radiation therapy planning where precise alignment between planning CT and daily setup imaging ensures accurate dose delivery to moving tumors. In brain imaging, it enables accurate inter-subject normalization by warping individual brains to standard templates while preserving local anatomical details for statistical parametric mapping. For cardiac imaging, it tracks myocardial motion across the cardiac cycle. In longitudinal tumor studies, it quantifies local volume changes by establishing voxel-wise correspondence. Applications include atlas-based segmentation propagation, deformation-based morphometry, and image-guided surgery where preoperative images must align with intraoperative anatomy.</p><h3>Output</h3><p>Returns a parameters (deformable_registration_results.json) containing paths to the registered image, B-spline transformation parameters, and similarity metrics. The output directory includes the deformably registered image with local anatomical features aligned, the deformation field transformation file (.tfm) encoding spatially varying displacements, quality metrics quantifying registration improvement, and optional visualizations showing the deformation grid and tissue warping patterns.</p><h3>Category</h3><p>bioimaging</p>",
  "command": "rm -rf prod_apps 2>/dev/null || true && git clone --depth 1 https://github.com/CamberCloud-Inc/prod_apps.git prod_apps && python3 prod_apps/biomni/bioimaging/quick_deformable_registration.py --fixed_image_path \"${fixed_image_path}\" --moving_image_path \"${moving_image_path}\" --output_dir \"${output_dir}\" --metric \"${metric}\" --optimizer \"${optimizer}\" --preprocess \"${preprocess}\" --create_visualizations \"${create_visualizations}\" --learning_rate \"${learning_rate}\" --number_of_iterations \"${number_of_iterations}\" --gradient_convergence_tolerance \"${gradient_convergence_tolerance}\" --number_of_control_points \"${number_of_control_points}\" -o \"${outputDir}\"",
  "engineType": "MPI",
  "jobConfig": [
    {
      "type": "Select",
      "label": "System Size",
      "name": "system_size",
      "hidden": true,
      "description": "Select the configuration for the job",
      "options": [
        {
          "label": "Extra Extra Small CPU",
          "value": "xxsmall_cpu",
          "mapValue": {
            "nodeSize": "XXSMALL",
            "numNodes": 1,
            "withGpu": false
          }
        }
      ],
      "defaultValue": "xxsmall_cpu"
    }
  ],
  "spec": [
    {
      "type": "Stash File",
      "name": "fixed_image_path",
      "label": "Fixed Image Path",
      "description": "Path to the reference/fixed image file in NIfTI format",
      "defaultValue": ""
    },
    {
      "type": "Stash File",
      "name": "moving_image_path",
      "label": "Moving Image Path",
      "description": "Path to the moving image file in NIfTI format",
      "defaultValue": ""
    },
    {
      "type": "Stash File",
      "name": "output_dir",
      "label": "Output Directory",
      "description": "Directory where registered images will be saved",
      "defaultValue": ""
    },
    {
      "type": "Select",
      "name": "metric",
      "label": "Similarity Metric",
      "description": "Similarity metric for optimization",
      "options": [
        {
          "label": "Mutual Information",
          "value": "mutual_information"
        },
        {
          "label": "Mean Squares",
          "value": "mean_squares"
        },
        {
          "label": "Correlation",
          "value": "correlation"
        }
      ],
      "defaultValue": "mutual_information"
    },
    {
      "type": "Select",
      "name": "optimizer",
      "label": "Optimizer",
      "description": "Optimization algorithm",
      "options": [
        {
          "label": "Gradient Descent",
          "value": "gradient_descent"
        },
        {
          "label": "LBFGSB",
          "value": "lbfgsb"
        },
        {
          "label": "Amoeba",
          "value": "amoeba"
        }
      ],
      "defaultValue": "gradient_descent"
    },
    {
      "type": "Select",
      "name": "preprocess",
      "label": "Preprocess",
      "description": "Enable preprocessing (denoising and normalization)",
      "options": [
        {
          "label": "True",
          "value": "true"
        },
        {
          "label": "False",
          "value": "false"
        }
      ],
      "defaultValue": "true"
    },
    {
      "type": "Select",
      "name": "create_visualizations",
      "label": "Create Visualizations",
      "description": "Generate before/after comparison visualizations",
      "options": [
        {
          "label": "True",
          "value": "true"
        },
        {
          "label": "False",
          "value": "false"
        }
      ],
      "defaultValue": "true"
    },
    {
      "type": "Input",
      "name": "learning_rate",
      "label": "Learning Rate",
      "description": "Step size for gradient descent optimizer",
      "defaultValue": "0.01"
    },
    {
      "type": "Input",
      "name": "number_of_iterations",
      "label": "Number of Iterations",
      "description": "Maximum number of optimization iterations",
      "defaultValue": "100"
    },
    {
      "type": "Input",
      "name": "gradient_convergence_tolerance",
      "label": "Gradient Convergence Tolerance",
      "description": "Convergence threshold for stopping optimization",
      "defaultValue": "1e-6"
    },
    {
      "type": "Input",
      "name": "number_of_control_points",
      "label": "Number of Control Points",
      "description": "Grid density for B-spline control points (higher = more flexible)",
      "defaultValue": "4"
    },
    {
      "type": "Stash File",
      "name": "outputDir",
      "label": "Output Directory",
      "description": "Output directory in stash",
      "defaultValue": "./"
    }
  ]
}