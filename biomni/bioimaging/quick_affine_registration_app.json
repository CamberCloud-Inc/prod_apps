{
  "name": "biomni-quick-affine-registration",
  "title": "Biomni: Quick Affine Registration",
  "description": "Quick affine registration of medical images using SimpleITK",
  "content": "<h3>Overview</h3><p>Affine registration extends rigid registration by allowing scaling and shearing transformations in addition to translation and rotation. This tool performs fast, automated affine alignment of two medical images using SimpleITK's optimization framework. Affine registration is ideal when images differ in scale or undergo slight deformation, such as in multi-modal imaging where different acquisition protocols yield size variations, or in cross-subject registration where anatomical size differences need correction before detailed analysis.</p><h3>Input Parameters</h3><ul><li><strong>fixed_image_path</strong> (string, required): Path to the reference/fixed image file in NIfTI format (.nii or .nii.gz) defining the target coordinate space</li><li><strong>moving_image_path</strong> (string, required): Path to the moving image file in NIfTI format (.nii or .nii.gz) to be registered to the fixed image</li><li><strong>output_dir</strong> (string, required): Directory where registered images, transformation files, and visualizations will be saved</li><li><strong>metric</strong> (string, optional): Similarity metric for optimization - 'mutual_information', 'mean_squares', or 'correlation'. Default: 'mutual_information'</li><li><strong>optimizer</strong> (string, optional): Optimization algorithm - 'gradient_descent', 'lbfgsb', or 'amoeba'. Default: 'gradient_descent'</li><li><strong>preprocess</strong> (boolean, optional): Enable preprocessing (denoising and normalization) before registration. Default: true</li><li><strong>create_visualizations</strong> (boolean, optional): Generate before/after comparison visualizations. Default: true</li><li><strong>learning_rate</strong> (number, optional): Step size for gradient descent optimizer. Default: 0.01</li><li><strong>number_of_iterations</strong> (integer, optional): Maximum number of optimization iterations. Default: 100</li><li><strong>gradient_convergence_tolerance</strong> (number, optional): Convergence threshold for stopping optimization. Default: 1e-6</li></ul><h3>Input Format</h3><pre>{\n  \"fixed_image_path\": \"/path/to/reference_image.nii.gz\",\n  \"moving_image_path\": \"/path/to/moving_image.nii.gz\",\n  \"output_dir\": \"/path/to/output/\",\n  \"metric\": \"mutual_information\",\n  \"optimizer\": \"gradient_descent\",\n  \"preprocess\": true,\n  \"create_visualizations\": true,\n  \"learning_rate\": 0.01,\n  \"number_of_iterations\": 150,\n  \"gradient_convergence_tolerance\": 1e-6\n}</pre><h3>Biological Use Case</h3><p>Affine registration is essential for aligning PET and MRI scans where different field-of-view settings create scale differences between modalities. In developmental neuroscience, it aligns pediatric and adult brain images accounting for natural size variations. For tumor monitoring, it compensates for brain shift and edema-related deformations between baseline and follow-up scans. In multi-site studies, affine registration normalizes images to a common atlas space (e.g., MNI152) enabling voxel-based morphometry and group statistical analysis. It serves as a crucial initialization step before more complex deformable registration.</p><h3>Output</h3><p>Returns a JSON file (affine_registration_results.json) containing paths to the registered image and transformation file, plus similarity metrics measured before and after registration. The output directory includes the registered image aligned to the fixed image's coordinate space, the affine transformation matrix (.tfm file) for applying to other data, quality metrics showing improvement in alignment, and optional visualization images for visual quality assessment.</p><h3>Category</h3><p>bioimaging</p>",
  "command": "rm -rf prod_apps 2>/dev/null || true && git clone --depth 1 https://github.com/CamberCloud-Inc/prod_apps.git prod_apps && python3 prod_apps/biomni/bioimaging/quick_affine_registration.py \"${inputFile}\" -o \"${outputDir}\"",
  "engineType": "MPI",
  "jobConfig": [
    {
      "type": "Select",
      "label": "System Size",
      "name": "system_size",
      "hidden": true,
      "description": "Select the configuration for the job",
      "options": [
        {
          "label": "Extra Extra Small CPU",
          "value": "xxsmall_cpu",
          "mapValue": {
            "nodeSize": "XXSMALL",
            "numNodes": 1,
            "withGpu": false
          }
        }
      ],
      "defaultValue": "xxsmall_cpu"
    }
  ],
  "spec": [
    {
      "type": "Stash File",
      "name": "inputFile",
      "label": "Input File",
      "description": "Input file from stash (JSON format)",
      "defaultValue": ""
    },
    {
      "type": "Stash File",
      "name": "outputDir",
      "label": "Output Directory",
      "description": "Output directory in stash",
      "defaultValue": "./"
    }
  ]
}