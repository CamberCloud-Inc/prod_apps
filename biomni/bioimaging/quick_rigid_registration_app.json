{
  "name": "biomni-quick-rigid-registration",
  "title": "Biomni: Quick Rigid Registration",
  "description": "Quick rigid registration of medical images using SimpleITK",
  "content": "<h3>Overview</h3><p>Rigid registration aligns two medical images using only translation and rotation transformations, preserving the size and shape of anatomical structures. This tool provides fast, robust rigid alignment using SimpleITK's optimization framework, ideal for registering images from the same patient acquired during the same session or for aligning images where anatomical structures maintain their shape. Rigid registration serves as the foundation for more complex registration methods and is computationally efficient for real-time clinical applications.</p><h3>Input Parameters</h3><ul><li><strong>fixed_image_path</strong> (string, required): Path to the reference/fixed image file in NIfTI format (.nii or .nii.gz) defining the target coordinate space</li><li><strong>moving_image_path</strong> (string, required): Path to the moving image file in NIfTI format (.nii or .nii.gz) to be rigidly registered</li><li><strong>output_dir</strong> (string, required): Directory where registered images, transformation matrices, and visualizations will be saved</li><li><strong>metric</strong> (string, optional): Similarity metric for optimization - 'mutual_information' (best for multi-modal), 'mean_squares' (for same-modality), or 'correlation'. Default: 'mutual_information'</li><li><strong>optimizer</strong> (string, optional): Optimization algorithm - 'gradient_descent', 'lbfgsb', or 'amoeba'. Default: 'gradient_descent'</li><li><strong>preprocess</strong> (boolean, optional): Enable preprocessing (denoising and normalization) before registration. Default: true</li><li><strong>create_visualizations</strong> (boolean, optional): Generate before/after comparison visualizations. Default: true</li><li><strong>learning_rate</strong> (number, optional): Step size for gradient descent optimizer. Default: 0.01</li><li><strong>number_of_iterations</strong> (integer, optional): Maximum number of optimization iterations. Default: 100</li><li><strong>gradient_convergence_tolerance</strong> (number, optional): Convergence threshold for stopping optimization. Default: 1e-6</li></ul><h3>Input Format</h3><pre>{\n  \"fixed_image_path\": \"/path/to/reference_image.nii.gz\",\n  \"moving_image_path\": \"/path/to/moving_image.nii.gz\",\n  \"output_dir\": \"/path/to/output/\",\n  \"metric\": \"mutual_information\",\n  \"optimizer\": \"gradient_descent\",\n  \"preprocess\": true,\n  \"create_visualizations\": true,\n  \"learning_rate\": 0.01,\n  \"number_of_iterations\": 100,\n  \"gradient_convergence_tolerance\": 1e-6\n}</pre><h3>Biological Use Case</h3><p>Rigid registration is fundamental for intra-patient multi-modal imaging alignment, such as fusing MRI and CT scans for surgical planning where brain structures maintain their shape. It's essential for serial imaging studies tracking response to therapy where the patient's anatomy hasn't significantly changed. In PET/CT hybrid imaging, rigid registration aligns functional and anatomical data acquired simultaneously. For quality control in longitudinal studies, rigid registration detects motion artifacts or patient repositioning between time points. It's the preferred method when computational speed is critical, such as in intraoperative navigation systems requiring real-time image alignment.</p><h3>Output</h3><p>Returns a JSON file (rigid_registration_results.json) containing paths to the registered image and rigid transformation file, plus similarity metrics quantifying alignment quality before and after registration. The output directory includes the registered image aligned to the fixed image coordinate system, a transformation matrix file (.tfm) encoding rotation and translation parameters that can be applied to other data, quantitative metrics demonstrating registration improvement, and optional visualization images for quality assessment.</p><h3>Category</h3><p>bioimaging</p>",
  "command": "rm -rf prod_apps 2>/dev/null || true && git clone --depth 1 https://github.com/CamberCloud-Inc/prod_apps.git prod_apps && python3 prod_apps/biomni/bioimaging/quick_rigid_registration.py \"${inputFile}\" -o \"${outputDir}\"",
  "engineType": "MPI",
  "jobConfig": [
    {
      "type": "Select",
      "label": "System Size",
      "name": "system_size",
      "hidden": true,
      "description": "Select the configuration for the job",
      "options": [
        {
          "label": "Extra Extra Small CPU",
          "value": "xxsmall_cpu",
          "mapValue": {
            "nodeSize": "XXSMALL",
            "numNodes": 1,
            "withGpu": false
          }
        }
      ],
      "defaultValue": "xxsmall_cpu"
    }
  ],
  "spec": [
    {
      "type": "Stash File",
      "name": "inputFile",
      "label": "Input File",
      "description": "Input file from stash (JSON format)",
      "defaultValue": ""
    },
    {
      "type": "Stash File",
      "name": "outputDir",
      "label": "Output Directory",
      "description": "Output directory in stash",
      "defaultValue": "./"
    }
  ]
}