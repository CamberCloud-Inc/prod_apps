{
  "name": "biomni-batch-register-images",
  "title": "Biomni: Batch Register Images",
  "description": "Batch registration of multiple images to a single reference",
  "content": "<h3>Overview</h3><p>Batch registration enables the spatial alignment of multiple medical images to a single reference image, ensuring all images share the same coordinate system. This tool uses SimpleITK to perform automated registration across multiple images in a directory, supporting rigid, affine, and deformable transformations. The registration process optimizes similarity metrics between the fixed reference and each moving image, producing aligned outputs and transformation parameters for reproducible workflows.</p><h3>Input Parameters</h3><ul><li><strong>fixed_image_path</strong> (string, required): Path to the reference/fixed image file in NIfTI format (.nii or .nii.gz) that serves as the target coordinate space</li><li><strong>moving_images_dir</strong> (string, required): Directory containing all moving images to be registered to the fixed image</li><li><strong>output_dir</strong> (string, required): Directory where registered images and transformation files will be saved</li><li><strong>transform_type</strong> (string, optional): Type of transformation - 'rigid' (translation + rotation), 'affine' (rigid + scaling + shearing), or 'deformable' (non-linear B-spline). Default: 'rigid'</li><li><strong>metric</strong> (string, optional): Similarity metric for optimization - 'mutual_information', 'mean_squares', or 'correlation'. Default: 'mutual_information'</li><li><strong>optimizer</strong> (string, optional): Optimization algorithm - 'gradient_descent', 'lbfgsb', or 'amoeba'. Default: 'gradient_descent'</li><li><strong>preprocess</strong> (boolean, optional): Enable preprocessing (denoising and normalization) before registration. Default: true</li><li><strong>create_visualizations</strong> (boolean, optional): Generate visualization images comparing before and after registration. Default: true</li><li><strong>learning_rate</strong> (number, optional): Step size for gradient descent optimizer. Default: 0.01</li><li><strong>number_of_iterations</strong> (integer, optional): Maximum number of optimization iterations. Default: 100</li><li><strong>gradient_convergence_tolerance</strong> (number, optional): Convergence threshold for optimization termination. Default: 1e-6</li></ul><h3>Biological Use Case</h3><p>This tool is essential for longitudinal neuroimaging studies where multiple MRI or CT scans from the same patient need to be aligned for tracking disease progression, tumor growth, or treatment response. In multi-subject studies, it enables spatial normalization by registering individual brains to a standard atlas space (e.g., MNI152). For multi-modal imaging, it aligns different imaging modalities (T1, T2, FLAIR, PET) to enable voxel-wise analysis. Common applications include brain tumor analysis in neuro-oncology, tracking atrophy in neurodegenerative diseases, and whole-body registration in oncological PET/CT studies.</p><h3>Output</h3><p>Returns a parameters (batch_registration_results.json) containing registration results for each processed image, including paths to registered images, transformation parameters, and similarity metrics before and after registration. The output directory contains: (1) registered images in the same coordinate space as the reference, (2) transformation files (.tfm) for applying transforms to other data, and (3) optional visualization images showing registration quality.</p><h3>Category</h3><p>bioimaging</p>",
  "command": "rm -rf prod_apps 2>/dev/null || true && git clone --depth 1 https://github.com/CamberCloud-Inc/prod_apps.git prod_apps && python3 prod_apps/biomni/bioimaging/batch_register_images.py --fixed_image_path \"${fixed_image_path}\" --moving_images_dir \"${moving_images_dir}\" --output_dir \"${output_dir}\" --transform_type \"${transform_type}\" --metric \"${metric}\" --optimizer \"${optimizer}\" --preprocess \"${preprocess}\" --create_visualizations \"${create_visualizations}\" --learning_rate \"${learning_rate}\" --number_of_iterations \"${number_of_iterations}\" --gradient_convergence_tolerance \"${gradient_convergence_tolerance}\" -o \"${outputDir}\"",
  "engineType": "MPI",
  "jobConfig": [
    {
      "type": "Select",
      "label": "System Size",
      "name": "system_size",
      "hidden": true,
      "description": "Select the configuration for the job",
      "options": [
        {
          "label": "Extra Extra Small CPU",
          "value": "xxsmall_cpu",
          "mapValue": {
            "nodeSize": "XXSMALL",
            "numNodes": 1,
            "withGpu": false
          }
        }
      ],
      "defaultValue": "xxsmall_cpu"
    }
  ],
  "spec": [
    {
      "type": "Stash File",
      "name": "fixed_image_path",
      "label": "Fixed Image Path",
      "description": "Path to the reference/fixed image file in NIfTI format",
      "defaultValue": "",
      "required": false
    },
    {
      "type": "Stash File",
      "name": "moving_images_dir",
      "label": "Moving Images Directory",
      "description": "Directory containing all moving images to be registered",
      "defaultValue": "",
      "required": true
    },
    {
      "type": "Stash File",
      "name": "output_dir",
      "label": "Output Directory",
      "description": "Directory where registered images will be saved",
      "defaultValue": "",
      "required": true
    },
    {
      "type": "Select",
      "name": "transform_type",
      "label": "Transform Type",
      "description": "Type of transformation",
      "options": [
        {
          "label": "Rigid",
          "value": "rigid"
        },
        {
          "label": "Affine",
          "value": "affine"
        },
        {
          "label": "Deformable",
          "value": "deformable"
        }
      ],
      "defaultValue": "rigid",
      "required": true
    },
    {
      "type": "Select",
      "name": "metric",
      "label": "Similarity Metric",
      "description": "Similarity metric for optimization",
      "options": [
        {
          "label": "Mutual Information",
          "value": "mutual_information"
        },
        {
          "label": "Mean Squares",
          "value": "mean_squares"
        },
        {
          "label": "Correlation",
          "value": "correlation"
        }
      ],
      "defaultValue": "mutual_information",
      "required": false
    },
    {
      "type": "Select",
      "name": "optimizer",
      "label": "Optimizer",
      "description": "Optimization algorithm",
      "options": [
        {
          "label": "Gradient Descent",
          "value": "gradient_descent"
        },
        {
          "label": "LBFGSB",
          "value": "lbfgsb"
        },
        {
          "label": "Amoeba",
          "value": "amoeba"
        }
      ],
      "defaultValue": "gradient_descent",
      "required": false
    },
    {
      "type": "Select",
      "name": "preprocess",
      "label": "Preprocess",
      "description": "Enable preprocessing (denoising and normalization)",
      "options": [
        {
          "label": "True",
          "value": "true"
        },
        {
          "label": "False",
          "value": "false"
        }
      ],
      "defaultValue": "true",
      "required": false
    },
    {
      "type": "Select",
      "name": "create_visualizations",
      "label": "Create Visualizations",
      "description": "Generate visualization images",
      "options": [
        {
          "label": "True",
          "value": "true"
        },
        {
          "label": "False",
          "value": "false"
        }
      ],
      "defaultValue": "true",
      "required": false
    },
    {
      "type": "Input",
      "name": "learning_rate",
      "label": "Learning Rate",
      "description": "Step size for gradient descent optimizer",
      "defaultValue": "0.01",
      "required": false
    },
    {
      "type": "Input",
      "name": "number_of_iterations",
      "label": "Number of Iterations",
      "description": "Maximum number of optimization iterations",
      "defaultValue": "100",
      "required": false
    },
    {
      "type": "Input",
      "name": "gradient_convergence_tolerance",
      "label": "Gradient Convergence Tolerance",
      "description": "Convergence threshold for optimization termination",
      "defaultValue": "1e-6",
      "required": false
    },
    {
      "type": "Stash File",
      "name": "outputDir",
      "label": "Output Directory",
      "description": "Output directory in stash",
      "defaultValue": "./"
    }
  ]
}