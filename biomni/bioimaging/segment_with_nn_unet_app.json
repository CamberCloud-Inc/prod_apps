{
  "name": "biomni-segment-with-nn-unet",
  "title": "Biomni: Segment With Nn Unet",
  "description": "Segment medical images using nnUNet with automatic model downloading",
  "content": "<h3>Overview</h3><p>nnUNet (no-new-Net) is a state-of-the-art deep learning framework for automated medical image segmentation that self-configures based on dataset properties. This tool performs inference using pre-trained nnUNet models, automatically downloading required model weights from the nnUNet model zoo and applying them to new medical images. It supports multiple model configurations (2D, 3D, cascade) and provides robust segmentation for various anatomical structures and pathologies without requiring manual parameter tuning or deep learning expertise.</p><h3>Input Parameters</h3><ul><li><strong>image_path</strong> (string, required): Path to the input medical image file or directory for segmentation (NIfTI format)</li><li><strong>output_dir</strong> (string, required): Directory where segmentation results will be saved</li><li><strong>task_id</strong> (string/integer, required): nnUNet task identifier specifying which pre-trained model to use (e.g., 'Task001_BrainTumour', 'Task002_Heart')</li><li><strong>model_type</strong> (string, optional): Model architecture - '2d', '3d_fullres', '3d_lowres', or '3d_cascade_fullres'. Default: '3d_fullres'</li><li><strong>folds</strong> (array of integers, optional): Cross-validation folds to ensemble (typically [0,1,2,3,4]). Default: [0,1,2,3,4]</li><li><strong>use_tta</strong> (boolean, optional): Enable test-time augmentation for improved accuracy at the cost of computation time. Default: false</li><li><strong>num_threads</strong> (integer, optional): Number of CPU threads for preprocessing and inference. Default: 1</li><li><strong>mixed_precision</strong> (boolean, optional): Use mixed precision computation (faster with minimal accuracy loss). Default: true</li><li><strong>verbose</strong> (boolean, optional): Enable detailed logging output. Default: true</li><li><strong>auto_prepare_input</strong> (boolean, optional): Automatically prepare input data to nnUNet format if needed. Default: true</li><li><strong>results_folder</strong> (string, optional): Path to custom nnUNet results folder containing trained models. Default: uses standard nnUNet model zoo</li></ul><h3>Biological Use Case</h3><p>nnUNet excels at brain tumor segmentation (BraTS challenge), automatically delineating tumor core, enhancing tumor, and edema regions critical for surgical planning and radiotherapy targeting. In cardiac imaging, it segments heart chambers and myocardium for functional assessment. For liver studies, it identifies liver parenchyma and tumors in CT scans. In prostate cancer, it segments prostate zones and lesions from multi-parametric MRI. The tool's self-configuring nature makes it ideal for translational research where consistent, reproducible segmentation is needed across large cohorts without extensive manual annotation, enabling high-throughput phenotyping and treatment response assessment.</p><h3>Output</h3><p>Returns a parameters (nnunet_segmentation_results.json) containing the path to the output directory with segmentation results. The output includes segmentation masks in NIfTI format with integer labels corresponding to different tissue classes or structures, probability maps for each class (if saved), and metadata describing the segmentation including class labels, model version, and processing parameters. Segmentation masks can be directly used for volumetric analysis, radiomics feature extraction, or visualization overlays.</p><h3>Category</h3><p>bioimaging</p>",
  "command": "rm -rf prod_apps 2>/dev/null || true && git clone --depth 1 https://github.com/CamberCloud-Inc/prod_apps.git prod_apps && python3 prod_apps/biomni/bioimaging/segment_with_nn_unet.py --image_path \"${image_path}\" --output_dir \"${output_dir}\" --task_id \"${task_id}\" --model_type \"${model_type}\" --folds \"${folds}\" --use_tta \"${use_tta}\" --num_threads \"${num_threads}\" --mixed_precision \"${mixed_precision}\" --verbose \"${verbose}\" --auto_prepare_input \"${auto_prepare_input}\" --results_folder \"${results_folder}\" -o \"${outputDir}\"",
  "engineType": "MPI",
  "jobConfig": [
    {
      "type": "Select",
      "label": "System Size",
      "name": "system_size",
      "hidden": true,
      "description": "Select the configuration for the job",
      "options": [
        {
          "label": "Extra Extra Small CPU",
          "value": "xxsmall_cpu",
          "mapValue": {
            "nodeSize": "XXSMALL",
            "numNodes": 1,
            "withGpu": false
          }
        }
      ],
      "defaultValue": "xxsmall_cpu"
    }
  ],
  "spec": [
    {
      "type": "Stash File",
      "name": "image_path",
      "label": "Image Path",
      "description": "Path to the input medical image file or directory for segmentation",
      "defaultValue": "",
      "required": false
    },
    {
      "type": "Stash File",
      "name": "output_dir",
      "label": "Output Directory",
      "description": "Directory where segmentation results will be saved",
      "defaultValue": "",
      "required": true
    },
    {
      "type": "Input",
      "name": "task_id",
      "label": "Task ID",
      "description": "nnUNet task identifier (e.g., 'Task001_BrainTumour', 'Task002_Heart')",
      "defaultValue": "Task001_BrainTumour",
      "required": true
    },
    {
      "type": "Select",
      "name": "model_type",
      "label": "Model Type",
      "description": "Model architecture type",
      "options": [
        {
          "label": "2D",
          "value": "2d"
        },
        {
          "label": "3D Full Resolution",
          "value": "3d_fullres"
        },
        {
          "label": "3D Low Resolution",
          "value": "3d_lowres"
        },
        {
          "label": "3D Cascade Full Resolution",
          "value": "3d_cascade_fullres"
        }
      ],
      "defaultValue": "3d_fullres",
      "required": true
    },
    {
      "type": "Input",
      "name": "folds",
      "label": "Folds",
      "description": "Cross-validation folds to ensemble (comma-separated, e.g., '0,1,2,3,4')",
      "defaultValue": "0,1,2,3,4",
      "required": false
    },
    {
      "type": "Select",
      "name": "use_tta",
      "label": "Use Test-Time Augmentation",
      "description": "Enable test-time augmentation for improved accuracy",
      "options": [
        {
          "label": "True",
          "value": "true"
        },
        {
          "label": "False",
          "value": "false"
        }
      ],
      "defaultValue": "false",
      "required": false
    },
    {
      "type": "Input",
      "name": "num_threads",
      "label": "Number of Threads",
      "description": "Number of CPU threads for preprocessing and inference",
      "defaultValue": "1",
      "required": false
    },
    {
      "type": "Select",
      "name": "mixed_precision",
      "label": "Mixed Precision",
      "description": "Use mixed precision computation",
      "options": [
        {
          "label": "True",
          "value": "true"
        },
        {
          "label": "False",
          "value": "false"
        }
      ],
      "defaultValue": "true",
      "required": false
    },
    {
      "type": "Select",
      "name": "verbose",
      "label": "Verbose",
      "description": "Enable detailed logging output",
      "options": [
        {
          "label": "True",
          "value": "true"
        },
        {
          "label": "False",
          "value": "false"
        }
      ],
      "defaultValue": "true",
      "required": false
    },
    {
      "type": "Select",
      "name": "auto_prepare_input",
      "label": "Auto Prepare Input",
      "description": "Automatically prepare input data to nnUNet format if needed",
      "options": [
        {
          "label": "True",
          "value": "true"
        },
        {
          "label": "False",
          "value": "false"
        }
      ],
      "defaultValue": "true",
      "required": false
    },
    {
      "type": "Input",
      "name": "results_folder",
      "label": "Results Folder",
      "description": "Path to custom nnUNet results folder (leave empty to use standard model zoo)",
      "defaultValue": "",
      "required": false
    },
    {
      "type": "Stash File",
      "name": "outputDir",
      "label": "Output Directory",
      "description": "Output directory in stash",
      "defaultValue": "./"
    }
  ]
}