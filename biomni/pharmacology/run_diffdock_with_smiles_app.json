{
  "name": "biomni-run-diffdock-with-smiles",
  "title": "Biomni: Run Diffdock With Smiles",
  "description": "Runs DiffDock inference for molecular docking using a Docker container",
  "content": "<h3>Overview</h3><p>Runs DiffDock inference for molecular docking using deep learning diffusion models. DiffDock leverages state-of-the-art AI to predict ligand binding poses with high accuracy, outperforming traditional docking methods for flexible proteins and novel scaffolds.</p><h3>Input Parameters</h3><ul><li><strong>pdb_path</strong> (required): Path to receptor protein PDB file</li><li><strong>smiles_string</strong> (required): SMILES notation of ligand molecule</li><li><strong>local_output_dir</strong> (required): Local directory for docking results</li><li><strong>gpu_device</strong> (optional): GPU device ID to use (default: 0)</li><li><strong>use_gpu</strong> (optional): Enable GPU acceleration (default: True)</li></ul><h3>Biological Use Case</h3><p>Advanced AI-driven molecular docking for lead discovery and optimization. Superior performance on challenging targets including flexible proteins, large binding sites, and novel chemical scaffolds. Generates high-quality binding poses for structure-activity relationship (SAR) analysis and rational drug design. Particularly effective for kinases, GPCRs, and protein-protein interaction inhibitors.</p><h3>Output</h3><p>DiffDock predictions with multiple binding poses, confidence scores, and coordinate files for each pose saved to diffdock_results.txt</p><h3>Category</h3><p>pharmacology</p>",
  "command": "rm -rf prod_apps 2>/dev/null || true && git clone --depth 1 https://github.com/CamberCloud-Inc/prod_apps.git prod_apps && python3 prod_apps/biomni/pharmacology/run_diffdock_with_smiles.py \"${inputFile}\" -o \"${outputDir}\"",
  "engineType": "MPI",
  "jobConfig": [
    {
      "type": "Select",
      "label": "System Size",
      "name": "system_size",
      "hidden": true,
      "description": "Select the configuration for the job",
      "options": [
        {
          "label": "Extra Extra Small CPU",
          "value": "xxsmall_cpu",
          "mapValue": {
            "nodeSize": "XXSMALL",
            "numNodes": 1,
            "withGpu": false
          }
        }
      ],
      "defaultValue": "xxsmall_cpu"
    }
  ],
  "spec": [
    {
      "type": "Stash File",
      "name": "inputFile",
      "label": "Input File",
      "description": "Input file from stash (JSON format)",
      "defaultValue": ""
    },
    {
      "type": "Stash File",
      "name": "outputDir",
      "label": "Output Directory",
      "description": "Output directory in stash",
      "defaultValue": "./"
    }
  ]
}