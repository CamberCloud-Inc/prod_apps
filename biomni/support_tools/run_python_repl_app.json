{
  "name": "biomni-run-python-repl",
  "title": "Biomni: Run Python Repl",
  "description": "Executes the provided Python command in a persistent environment and returns the output. Variables defined in one execution will be available in subsequent executions.",
  "content": "<h3>Overview</h3><p>This utility tool executes Python commands in a persistent REPL (Read-Eval-Print Loop) environment. Variables, functions, and imported modules persist across executions, enabling stateful interactive computing sessions for bioinformatics workflows.</p><h3>Input Parameters</h3><ul><li><strong>command</strong> (required): Python code string to execute in the persistent REPL environment</li></ul><h3>Input Format</h3><pre><code class=\"language-json\">{\n  \"command\": \"import pandas as pd\\ndf = pd.read_csv('data.csv')\\nprint(df.head())\"\n}</code></pre><h3>Biological Use Case</h3><p>The persistent Python REPL is essential for interactive bioinformatics analysis workflows:</p><ul><li>Loading large genomic datasets once and performing multiple analyses</li><li>Building complex data transformations step-by-step</li><li>Iterative parameter optimization for variant calling or alignment</li><li>Interactive quality control and exploratory data analysis</li><li>Prototyping custom analysis scripts with immediate feedback</li><li>Maintaining state across multi-step preprocessing pipelines</li><li>Quick calculations and data format conversions</li></ul><p>The stateful nature eliminates redundant data loading and allows researchers to build analyses incrementally, similar to working in Jupyter notebooks.</p><h3>Output</h3><p>Generates a text file (repl_result.txt) containing the command output, including print statements, return values, and error messages. Any variables created persist for subsequent REPL executions.</p><h3>Category</h3><p>support_tools</p>",
  "command": "rm -rf prod_apps 2>/dev/null || true && git clone --depth 1 https://github.com/CamberCloud-Inc/prod_apps.git prod_apps && python3 prod_apps/biomni/support_tools/run_python_repl.py \"${pythonCommand}\" -o \"${outputDir}\"",
  "engineType": "MPI",
  "jobConfig": [
    {
      "type": "Select",
      "label": "System Size",
      "name": "system_size",
      "hidden": true,
      "description": "Select the configuration for the job",
      "options": [
        {
          "label": "Extra Extra Small CPU",
          "value": "xxsmall_cpu",
          "mapValue": {
            "nodeSize": "XXSMALL",
            "numNodes": 1,
            "withGpu": false
          }
        }
      ],
      "defaultValue": "xxsmall_cpu"
    }
  ],
  "spec": [
    {
      "type": "Input",
      "name": "pythonCommand",
      "label": "Python Command",
      "description": "Enter the Python code to execute (e.g., import pandas as pd; df = pd.read_csv('data.csv'); print(df.head()))",
      "defaultValue": ""
    },
    {
      "type": "Stash File",
      "name": "outputDir",
      "label": "Output Directory",
      "description": "Select or create a stash folder where the result will be saved",
      "defaultValue": "./"
    }
  ]
}