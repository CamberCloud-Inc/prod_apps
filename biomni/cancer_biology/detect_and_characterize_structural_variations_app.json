{
  "name": "biomni-detect-and-characterize-structural-variations",
  "title": "Biomni: Detect And Characterize Structural Variations",
  "description": "Detects and characterizes structural variations (SVs) in genomic sequencing data. Uses LUMPY for SV detection followed by annotation with COSMIC and/or ClinVar databases to identify deletions, inversions, translocations, and duplications.",
  "content": "<h3>Overview</h3><p>Detects and characterizes structural variations (SVs) in genomic sequencing data using advanced computational methods. This tool employs LUMPY, a probabilistic framework for SV detection that integrates multiple signals including paired-end mapping, split reads, and read depth, followed by comprehensive annotation with COSMIC (Catalogue Of Somatic Mutations In Cancer) and ClinVar databases. Identifies deletions, inversions, translocations, and duplications that drive cancer through oncogene activation, tumor suppressor inactivation, and generation of fusion genes.</p><h3>Input Parameters</h3><ul><li><strong>bam_file_path</strong> (string, required): Path to the BAM file containing aligned sequencing reads</li><li><strong>reference_genome_path</strong> (string, required): Path to the reference genome FASTA file</li><li><strong>output_dir</strong> (string, required): Directory for output files</li><li><strong>cosmic_db_path</strong> (string, optional): Path to COSMIC database for annotation of cancer-relevant SVs</li><li><strong>clinvar_db_path</strong> (string, optional): Path to ClinVar database for clinical significance annotation</li></ul><h3>Input Format</h3><p>JSON file with the following structure:</p><pre>{\n  \"bam_file_path\": \"/path/to/sample.bam\",\n  \"reference_genome_path\": \"/path/to/reference.fa\",\n  \"output_dir\": \"./sv_results\",\n  \"cosmic_db_path\": \"/path/to/cosmic.vcf\",\n  \"clinvar_db_path\": \"/path/to/clinvar.vcf\"\n}</pre><h3>Biological Use Case</h3><p>Structural variations are major drivers of cancer development and progression. This tool addresses critical research questions:</p><ul><li><strong>Oncogenic fusions</strong>: Detect gene fusions that create oncogenic drivers (e.g., BCR-ABL1 in CML, EML4-ALK in lung cancer, TMPRSS2-ERG in prostate cancer)</li><li><strong>Tumor suppressor inactivation</strong>: Identify large deletions disrupting tumor suppressors or regulatory elements</li><li><strong>Oncogene amplification</strong>: Detect tandem duplications leading to focal amplifications of oncogenes</li><li><strong>Chromothripsis</strong>: Identify complex chromosomal rearrangements resulting from catastrophic chromosome shattering</li><li><strong>Enhancer hijacking</strong>: Find translocations and inversions that place oncogenes under control of strong enhancers</li><li><strong>Therapeutic targets</strong>: Identify actionable fusions (e.g., ALK, ROS1, NTRK fusions targetable with specific inhibitors)</li><li><strong>Resistance mechanisms</strong>: Detect SVs that confer therapy resistance (e.g., MET amplification in EGFR inhibitor resistance)</li><li><strong>Cancer classification</strong>: Use SV patterns for molecular subtyping of tumors</li></ul><h3>Output</h3><p>Text file (structural_variations_results.txt) containing comprehensive SV analysis including: list of all detected structural variants with genomic coordinates and breakpoints, SV types (deletion, duplication, inversion, translocation), affected genes and regulatory elements, gene fusion predictions, COSMIC and ClinVar annotations indicating known cancer relevance, and confidence scores for each SV call.</p><h3>Category</h3><p>cancer_biology</p>",
  "command": "rm -rf prod_apps 2>/dev/null || true && git clone --depth 1 https://github.com/CamberCloud-Inc/prod_apps.git prod_apps && python3 prod_apps/biomni/cancer_biology/detect_and_characterize_structural_variations.py \"${inputFile}\" -o \"${outputDir}\"",
  "engineType": "MPI",
  "jobConfig": [
    {
      "type": "Select",
      "label": "System Size",
      "name": "system_size",
      "hidden": true,
      "description": "Select the configuration for the job",
      "options": [
        {
          "label": "Extra Extra Small CPU",
          "value": "xxsmall_cpu",
          "mapValue": {
            "nodeSize": "XXSMALL",
            "numNodes": 1,
            "withGpu": false
          }
        }
      ],
      "defaultValue": "xxsmall_cpu"
    }
  ],
  "spec": [
    {
      "type": "Stash File",
      "name": "inputFile",
      "label": "Input File",
      "description": "Input file from stash (JSON format)",
      "defaultValue": ""
    },
    {
      "type": "Stash File",
      "name": "outputDir",
      "label": "Output Directory",
      "description": "Output directory in stash",
      "defaultValue": "./"
    }
  ]
}