{
  "name": "biomni-perform-gene-expression-nmf-analysis",
  "title": "Biomni: Perform Gene Expression Nmf Analysis",
  "description": "Perform Non-negative Matrix Factorization (NMF) on gene expression data to identify expression signatures and patterns. Decomposes gene expression matrix into interpretable components representing biological processes or cell types.",
  "content": "<h3>Overview</h3><p>Perform Non-negative Matrix Factorization (NMF) on gene expression data to identify expression signatures and patterns in cancer samples. NMF is an unsupervised dimensionality reduction technique that decomposes the gene expression matrix into two non-negative matrices representing gene signatures (metagenes) and sample weights. This approach reveals hidden biological patterns, identifies molecular subtypes, deconvolves mixed cell populations, and discovers gene expression programs associated with cancer phenotypes.</p><h3>Input Parameters</h3><ul><li><strong>expression_data_path</strong> (string, required): Path to gene expression data file (matrix format with genes as rows and samples as columns)</li><li><strong>n_components</strong> (integer, optional): Number of NMF components/signatures to extract (default: 5)</li><li><strong>output_dir</strong> (string, optional): Directory for output files (default: './results')</li></ul><h3>Input Format</h3><p>JSON file with the following structure:</p><pre>{\n  \"expression_data_path\": \"/path/to/expression_matrix.txt\",\n  \"n_components\": 5,\n  \"output_dir\": \"./nmf_results\"\n}</pre><h3>Biological Use Case</h3><p>Non-negative Matrix Factorization is a powerful tool for discovering hidden patterns in cancer gene expression data. This tool enables researchers to:</p><ul><li><strong>Identify molecular subtypes</strong>: Discover distinct cancer subtypes with different gene expression patterns (e.g., luminal vs. basal breast cancer, molecular subtypes of glioblastoma)</li><li><strong>Deconvolve cell populations</strong>: Separate signals from different cell types in bulk tumor samples including cancer cells, immune cells, stromal cells, and endothelial cells</li><li><strong>Discover expression programs</strong>: Identify coordinated gene expression programs such as proliferation signatures, hypoxia responses, immune activation, epithelial-mesenchymal transition (EMT), and stem cell programs</li><li><strong>Characterize tumor microenvironment</strong>: Quantify immune infiltration and stromal content from expression signatures</li><li><strong>Predict clinical outcomes</strong>: Use NMF-derived signatures to predict prognosis, therapy response, and metastatic potential</li><li><strong>Identify biomarkers</strong>: Extract gene signatures that distinguish biological states or predict treatment outcomes</li><li><strong>Compare across datasets</strong>: Apply learned signatures to new datasets for consistent molecular classification</li><li><strong>Pathway analysis</strong>: Interpret NMF components as biological pathways by examining genes with high weights</li></ul><h3>Output</h3><p>Text file (nmf_analysis_results.txt) containing comprehensive NMF analysis results including: W matrix (gene weights for each component/signature), H matrix (component/signature weights for each sample), top genes contributing to each component, component interpretation based on enriched biological processes, sample clustering based on component weights, and variance explained by each component.</p><h3>Category</h3><p>cancer_biology</p>",
  "command": "rm -rf prod_apps 2>/dev/null || true && git clone --depth 1 https://github.com/CamberCloud-Inc/prod_apps.git prod_apps && python3 prod_apps/biomni/cancer_biology/perform_gene_expression_nmf_analysis.py \"${inputFile}\" -o \"${outputDir}\"",
  "engineType": "MPI",
  "jobConfig": [
    {
      "type": "Select",
      "label": "System Size",
      "name": "system_size",
      "hidden": true,
      "description": "Select the configuration for the job",
      "options": [
        {
          "label": "Extra Extra Small CPU",
          "value": "xxsmall_cpu",
          "mapValue": {
            "nodeSize": "XXSMALL",
            "numNodes": 1,
            "withGpu": false
          }
        }
      ],
      "defaultValue": "xxsmall_cpu"
    }
  ],
  "spec": [
    {
      "type": "Stash File",
      "name": "inputFile",
      "label": "Input File",
      "description": "Input file from stash (JSON format)",
      "defaultValue": ""
    },
    {
      "type": "Stash File",
      "name": "outputDir",
      "label": "Output Directory",
      "description": "Output directory in stash",
      "defaultValue": "./"
    }
  ]
}