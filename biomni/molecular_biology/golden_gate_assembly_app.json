{
  "name": "biomni-golden-gate-assembly",
  "title": "Biomni: Golden Gate Assembly",
  "description": "Simulate Golden Gate assembly to predict final construct sequences",
  "content": "<h3>Overview</h3><p>This tool performs in silico simulation of Golden Gate assembly reactions to predict the final assembled construct sequence. It processes Type IIS restriction enzyme digestion of the backbone and insert fragments, matches compatible overhangs, and assembles fragments in the correct order. The simulation validates overhang compatibility and predicts the complete sequence of the assembled product before laboratory work.</p><h3>Input Parameters</h3><ul><li><strong>backbone_sequence</strong>: Complete backbone/vector DNA sequence (string)</li><li><strong>enzyme</strong>: Type IIS restriction enzyme name (BsaI, BsmBI, BbsI, Esp3I, BtgZI, or SapI)</li><li><strong>fragments_file</strong>: Path to parameters containing fragment definitions with sequences and overhangs</li><li><strong>--linear</strong>: Optional flag indicating backbone is linear (default: circular)</li></ul><h3>Biological Use Case</h3><p>Critical for planning and validating Golden Gate cloning strategies:</p><ul><li>Predict final construct sequences before experimental work</li><li>Validate overhang compatibility in multi-fragment assemblies</li><li>Troubleshoot failed assemblies by checking theoretical outcomes</li><li>Design modular cloning strategies with predictable results</li><li>Verify correct fragment order in complex assemblies</li><li>Plan hierarchical assemblies for large synthetic constructs</li></ul><h3>Output</h3><p>Returns a parameters (golden_gate_assembly.json) containing the complete assembled sequence, junction sites, and assembly validation information.</p><h3>Category</h3><p>molecular_biology</p>",
  "command": "rm -rf prod_apps 2>/dev/null || true && git clone --depth 1 https://github.com/CamberCloud-Inc/prod_apps.git prod_apps && python3 prod_apps/biomni/molecular_biology/golden_gate_assembly.py \"${backbone_sequence}\" \"${enzyme}\" \"${fragments_file}\" ${linear} -o \"${outputDir}\"",
  "engineType": "MPI",
  "jobConfig": [
    {
      "type": "Select",
      "label": "System Size",
      "name": "system_size",
      "hidden": true,
      "description": "Select the configuration for the job",
      "options": [
        {
          "label": "Extra Extra Small CPU",
          "value": "xxsmall_cpu",
          "mapValue": {
            "nodeSize": "XXSMALL",
            "numNodes": 1,
            "withGpu": false
          }
        }
      ],
      "defaultValue": "xxsmall_cpu"
    }
  ],
  "spec": [
    {
      "type": "Input",
      "name": "backbone_sequence",
      "label": "Backbone Sequence",
      "description": "Complete backbone sequence",
      "defaultValue": ""
    },
    {
      "type": "Input",
      "name": "enzyme",
      "label": "Enzyme",
      "description": "Type IIS enzyme (BsaI, BsmBI, BbsI, Esp3I, BtgZI, SapI)",
      "defaultValue": "BsaI"
    },
    {
      "type": "Stash File",
      "name": "fragments_file",
      "label": "Fragments File",
      "description": "JSON file with fragment definitions",
      "defaultValue": ""
    },
    {
      "type": "Input",
      "name": "linear",
      "label": "Linear Backbone",
      "description": "Backbone is linear (leave empty for circular, add --linear for linear)",
      "defaultValue": ""
    },
    {
      "type": "Stash File",
      "name": "outputDir",
      "label": "Output Directory",
      "description": "Output directory in stash",
      "defaultValue": "./"
    }
  ]
}