{
  "name": "biomni-analyze-genomic-region-overlap",
  "title": "Biomni: Analyze Genomic Region Overlap",
  "description": "Analyze overlaps and intersections between multiple sets of genomic regions",
  "content": "<h3>Overview</h3><p>Analyzes overlaps, intersections, and spatial relationships between multiple sets of genomic regions. This tool identifies co-localization patterns, calculates overlap statistics, and reveals functional associations between different genomic features such as regulatory elements, transcription factor binding sites, or chromatin modifications.</p><h3>Input Parameters</h3><ul><li><strong>region_sets_json</strong> (string): Path to JSON file containing array of BED file paths or region lists from stash</li><li><strong>output_prefix</strong> (string, optional): Prefix for output files (default: overlap_analysis)</li><li><strong>output</strong> (string): Output directory path</li></ul><h3>Input Format</h3><p>Provide a JSON file with the following structure:</p><pre>{\n  \"region_sets_json\": \"/path/to/region_sets.json\",\n  \"output_prefix\": \"my_analysis\",\n  \"output\": \"/output/directory\"\n}</pre><p>Where region_sets.json contains:</p><pre>[\n  \"/path/to/peaks1.bed\",\n  \"/path/to/peaks2.bed\",\n  \"/path/to/enhancers.bed\"\n]</pre><h3>Biological Use Case</h3><p>Essential for integrating multi-omics data and identifying functional genomic relationships. Used to determine if different ChIP-seq peaks co-localize, find regulatory elements overlapping with GWAS SNPs, identify shared binding sites between transcription factors, and integrate ATAC-seq with histone modification data.</p><h3>Output</h3><p>Generates overlap_analysis_log.txt with overlap matrices, Venn diagram data, intersection coordinates, and statistical significance of overlaps.</p><h3>Category</h3><p>genomics</p>",
  "command": "rm -rf prod_apps 2>/dev/null || true && git clone --depth 1 https://github.com/CamberCloud-Inc/prod_apps.git prod_apps && python3 prod_apps/biomni/genomics/analyze_genomic_region_overlap.py \"${inputFile}\" -o \"${outputDir}\"",
  "engineType": "MPI",
  "jobConfig": [
    {
      "type": "Select",
      "label": "System Size",
      "name": "system_size",
      "hidden": true,
      "description": "Select the configuration for the job",
      "options": [
        {
          "label": "Extra Extra Small CPU",
          "value": "xxsmall_cpu",
          "mapValue": {
            "nodeSize": "XXSMALL",
            "numNodes": 1,
            "withGpu": false
          }
        }
      ],
      "defaultValue": "xxsmall_cpu"
    }
  ],
  "spec": [
    {
      "type": "Stash File",
      "name": "inputFile",
      "label": "Input File",
      "description": "Input file from stash (JSON format)",
      "defaultValue": ""
    },
    {
      "type": "Stash File",
      "name": "outputDir",
      "label": "Output Directory",
      "description": "Output directory in stash",
      "defaultValue": "./"
    }
  ]
}