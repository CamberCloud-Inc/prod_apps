{
  "name": "biomni-query-gnomad",
  "title": "Biomni: Query Gnomad",
  "description": "Query gnomAD (Genome Aggregation Database) for population allele frequencies and constraint metrics of genetic variants.",
  "content": "<h3>Overview</h3><p>Accesses gnomAD, the largest public database of human genetic variation containing exome and genome data from over 140,000 individuals. Provides population allele frequencies, gene constraint metrics, and variant annotations essential for distinguishing pathogenic from benign variants.</p><h3>Input Parameters</h3><ul><li><strong>prompt</strong> (string, optional): Natural language query about variants or genes</li><li><strong>gene_symbol</strong> (string, optional): Gene symbol to query (e.g., \"BRCA1\", \"TP53\")</li><li><strong>verbose</strong> (boolean, optional): Enable detailed logging output (default: true)</li></ul><h3>Input Format</h3><p>Create a JSON file with the following structure:</p><pre>{\n  \"prompt\": \"Show variants in CFTR gene\",\n  \"gene_symbol\": \"CFTR\",\n  \"verbose\": true\n}</pre><h3>Biological Use Case</h3><p>Essential for clinical variant interpretation and rare disease genetics. Researchers and clinicians use gnomAD to determine if variants are common in the general population (likely benign) or absent (potentially pathogenic), assess gene-level constraint scores to identify dosage-sensitive genes, and filter candidate disease variants in exome/genome sequencing studies.</p><h3>Output</h3><p>Returns a JSON file (gnomad_results.json) containing variant allele frequencies across populations (AFR, AMR, EAS, NFE, SAS), gene constraint metrics (pLI, LOEUF), variant functional annotations, coverage information, and quality metrics. Includes population-specific and global allele frequency data.</p><h3>Category</h3><p>database</p>",
  "command": "rm -rf prod_apps 2>/dev/null || true && git clone --depth 1 https://github.com/CamberCloud-Inc/prod_apps.git prod_apps && python3 prod_apps/biomni/database/query_gnomad.py --prompt \"${prompt}\" --gene_symbol \"${gene_symbol}\" --verbose \"${verbose}\" -o \"${outputDir}\"",
  "engineType": "MPI",
  "jobConfig": [
    {
      "type": "Select",
      "label": "System Size",
      "name": "system_size",
      "hidden": true,
      "description": "Select the configuration for the job",
      "options": [
        {
          "label": "Extra Extra Small CPU",
          "value": "xxsmall_cpu",
          "mapValue": {
            "nodeSize": "XXSMALL",
            "numNodes": 1,
            "withGpu": false
          }
        }
      ],
      "defaultValue": "xxsmall_cpu"
    }
  ],
  "spec": [
    {
      "type": "Input",
      "name": "prompt",
      "label": "Prompt",
      "description": "Query prompt/description",
      "defaultValue": ""
    },
    {
      "type": "Input",
      "name": "gene_symbol",
      "label": "Gene Symbol",
      "description": "Gene symbol to query",
      "defaultValue": ""
    },
    {
      "type": "Input",
      "name": "verbose",
      "label": "Verbose",
      "description": "Enable verbose output (true/false, default: true)",
      "defaultValue": "true"
    },
    {
      "type": "Stash File",
      "name": "outputDir",
      "label": "Output Directory",
      "description": "Output directory in stash",
      "defaultValue": "./"
    }
  ]
}