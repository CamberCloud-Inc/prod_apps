{
  "name": "biomni-query-ensembl",
  "title": "Biomni: Query Ensembl",
  "description": "Query Ensembl for comprehensive genomic annotations including genes, transcripts, variants, and comparative genomics across species.",
  "content": "<h3>Overview</h3><p>Accesses Ensembl, a leading genome annotation system providing automatic annotation for vertebrate and model organism genomes. Ensembl integrates genomic data with functional information, comparative genomics, variation data, and regulatory features across 100+ species.</p><h3>Input Parameters</h3><ul><li><strong>prompt</strong> (string, optional): Natural language query about genomic features</li><li><strong>endpoint</strong> (string, optional): Specific Ensembl REST API endpoint</li><li><strong>verbose</strong> (boolean, optional): Enable detailed logging output (default: true)</li></ul><h3>Input Format</h3><p>Create a JSON file with the following structure:</p><pre>{\n  \"prompt\": \"Get transcript information for BRCA2 gene\",\n  \"endpoint\": \"/lookup/symbol/homo_sapiens/BRCA2\",\n  \"verbose\": true\n}</pre><h3>Biological Use Case</h3><p>Essential for genome analysis, gene annotation, comparative genomics, and variant interpretation. Researchers use Ensembl to retrieve gene structures, identify orthologs across species, map variants to transcripts, access regulatory elements, and integrate multi-omics data. Critical for understanding gene function, evolution, and disease mechanisms.</p><h3>Output</h3><p>Returns a JSON file (ensembl_results.json) containing genomic coordinates, gene/transcript structures, exon boundaries, protein sequences, variant annotations, cross-references to other databases, and comparative genomics data including orthology relationships.</p><h3>Category</h3><p>database</p>",
  "command": "rm -rf prod_apps 2>/dev/null || true && git clone --depth 1 https://github.com/CamberCloud-Inc/prod_apps.git prod_apps && python3 prod_apps/biomni/database/query_ensembl.py --prompt \"${prompt}\" --endpoint \"${endpoint}\" --verbose \"${verbose}\" -o \"${outputDir}\"",
  "engineType": "MPI",
  "jobConfig": [
    {
      "type": "Select",
      "label": "System Size",
      "name": "system_size",
      "hidden": true,
      "description": "Select the configuration for the job",
      "options": [
        {
          "label": "Extra Extra Small CPU",
          "value": "xxsmall_cpu",
          "mapValue": {
            "nodeSize": "XXSMALL",
            "numNodes": 1,
            "withGpu": false
          }
        }
      ],
      "defaultValue": "xxsmall_cpu"
    }
  ],
  "spec": [
    {
      "type": "Input",
      "name": "prompt",
      "label": "Prompt",
      "description": "Query prompt/description",
      "defaultValue": ""
    },
    {
      "type": "Input",
      "name": "endpoint",
      "label": "Endpoint",
      "description": "API endpoint path",
      "defaultValue": ""
    },
    {
      "type": "Input",
      "name": "verbose",
      "label": "Verbose",
      "description": "Enable verbose output (true/false, default: true)",
      "defaultValue": "true"
    },
    {
      "type": "Stash File",
      "name": "outputDir",
      "label": "Output Directory",
      "description": "Output directory in stash",
      "defaultValue": "./"
    }
  ]
}