{
  "name": "biomni-region-to-ccre-screen",
  "title": "Biomni: Region To Ccre Screen",
  "description": "Find candidate cis-Regulatory Elements overlapping a genomic region from ENCODE SCREEN.",
  "content": "<h3>Overview</h3><p>Queries ENCODE SCREEN database identifying candidate cis-Regulatory Elements based on chromatin accessibility and histone modifications across hundreds of biosamples.</p><h3>Input Parameters</h3><ul><li><strong>coord_chrom</strong> (string, required): Chromosome (e.g., \"chr1\")</li><li><strong>coord_start</strong> (integer, required): Start coordinate</li><li><strong>coord_end</strong> (integer, required): End coordinate</li><li><strong>assembly</strong> (string, optional): Genome assembly (default: \"GRCh38\")</li></ul><h3>Input Format</h3><p>Create JSON:</p><pre>{\n  \"coord_chrom\": \"chr1\",\n  \"coord_start\": 1000000,\n  \"coord_end\": 1100000\n}</pre><h3>Biological Use Case</h3><p>Essential for identifying regulatory elements, interpreting non-coding variants, and understanding gene regulation. Researchers use this to map enhancers/promoters, link variants to regulatory activity, identify cell-specific elements, and prioritize functional validation.</p><h3>Output</h3><p>Returns JSON (region_to_ccre.json) with cCRE info including accessions, coordinates, element types (promoter-like, enhancer-like, CTCF-bound), biosample activity patterns, overlapping peaks, and nearby genes.</p><h3>Category</h3><p>database</p>",
  "command": "rm -rf prod_apps 2>/dev/null || true && git clone --depth 1 https://github.com/CamberCloud-Inc/prod_apps.git prod_apps && python3 prod_apps/biomni/database/region_to_ccre_screen.py --coord_chrom \"${coord_chrom}\" --coord_start \"${coord_start}\" --coord_end \"${coord_end}\" --assembly \"${assembly}\" -o \"${outputDir}\"",
  "engineType": "MPI",
  "jobConfig": [
    {
      "type": "Select",
      "label": "System Size",
      "name": "system_size",
      "hidden": true,
      "description": "Select the configuration for the job",
      "options": [
        {
          "label": "Extra Extra Small CPU",
          "value": "xxsmall_cpu",
          "mapValue": {
            "nodeSize": "XXSMALL",
            "numNodes": 1,
            "withGpu": false
          }
        }
      ],
      "defaultValue": "xxsmall_cpu"
    }
  ],
  "spec": [
    {
      "type": "Input",
      "name": "coord_chrom",
      "label": "Chromosome",
      "description": "Chromosome name",
      "defaultValue": ""
    },
    {
      "type": "Input",
      "name": "coord_start",
      "label": "Start Position",
      "description": "Start genomic coordinate",
      "defaultValue": ""
    },
    {
      "type": "Input",
      "name": "coord_end",
      "label": "End Position",
      "description": "End genomic coordinate",
      "defaultValue": ""
    },
    {
      "type": "Input",
      "name": "assembly",
      "label": "Assembly",
      "description": "Genome assembly (default: GRCh38)",
      "defaultValue": "GRCh38"
    },
    {
      "type": "Stash File",
      "name": "outputDir",
      "label": "Output Directory",
      "description": "Output directory in stash",
      "defaultValue": "./"
    }
  ]
}