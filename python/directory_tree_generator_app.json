{
  "name": "directory-tree-generator",
  "title": "Directory Tree Generator",
  "description": "Generate visual directory structure diagrams",
  "content": "<h3 class=\"heading-node\">Overview</h3><p class=\"text-node\">This application generates visual directory structure diagrams using Python's built-in os.walk functionality. It creates an ASCII tree representation of directory hierarchies, making it easy to visualize and document file system structures.</p><h3 class=\"heading-node\">Features</h3><ul class=\"list-node\"><li class=\"list-item-node\">Generate ASCII tree diagrams of directory structures</li><li class=\"list-item-node\">Control maximum depth of traversal</li><li class=\"list-item-node\">Option to show or hide hidden files</li><li class=\"list-item-node\">Directories listed before files for clarity</li><li class=\"list-item-node\">Handles permission errors gracefully</li></ul><h3 class=\"heading-node\">Parameters</h3><ul class=\"list-node\"><li class=\"list-item-node\"><strong>Input Directory</strong>: Select the directory to analyze from stash</li><li class=\"list-item-node\"><strong>Max Depth</strong>: Limit the depth of directory traversal (optional)</li><li class=\"list-item-node\"><strong>Show Hidden</strong>: Include hidden files and directories (starting with .)</li><li class=\"list-item-node\"><strong>Output Directory</strong>: Select or create a stash folder for output</li></ul><h3 class=\"heading-node\">Output</h3><p class=\"text-node\">The application generates a text file containing an ASCII tree diagram of the directory structure.</p><h3 class=\"heading-node\">Use Cases</h3><ul class=\"list-node\"><li class=\"list-item-node\">Documenting project structure in README files</li><li class=\"list-item-node\">Visualizing directory hierarchies for analysis</li><li class=\"list-item-node\">Creating file system documentation</li><li class=\"list-item-node\">Auditing directory organization</li></ul>",
  "command": "REPO_DIR=\"prod_apps_$(date +%s%N)\"; rm -rf \"$REPO_DIR\" 2>/dev/null || true; git clone https://github.com/CamberCloud-Inc/prod_apps.git \"$REPO_DIR\" && python \"$REPO_DIR/python/directory_tree_generator.py\" \"${inputDir}\" -o \"${outputDir}\" $([ -n \"${maxDepth}\" ] && echo \"-d ${maxDepth}\" || echo \"\") ${showHiddenFlag}",
  "engineType": "MPI",
  "jobConfig": [
    {
      "type": "Select",
      "label": "System Size",
      "name": "system_size",
      "hidden": true,
      "description": "Select the configuration for the job",
      "options": [
        {
          "label": "Extra Extra Small CPU",
          "value": "xxsmall_cpu",
          "mapValue": {
            "nodeSize": "XXSMALL",
            "numNodes": 1,
            "withGpu": false
          }
        }
      ],
      "defaultValue": "xxsmall_cpu"
    }
  ],
  "spec": [
    {
      "type": "Stash File",
      "name": "inputDir",
      "label": "Input Directory",
      "description": "Select the directory you want to analyze",
      "defaultValue": ""
    },
    {
      "type": "Number",
      "name": "maxDepth",
      "label": "Max Depth (optional)",
      "description": "Maximum depth to traverse (leave empty for unlimited)",
      "defaultValue": null
    },
    {
      "type": "Boolean",
      "name": "showHiddenFlag",
      "label": "Show Hidden Files",
      "description": "Include hidden files and directories (starting with .)",
      "trueValue": "-a",
      "falseValue": "",
      "defaultValue": false
    },
    {
      "type": "Stash File",
      "name": "outputDir",
      "label": "Output Directory",
      "description": "Select or create a stash folder where the tree diagram will be saved",
      "defaultValue": "./"
    }
  ]
}