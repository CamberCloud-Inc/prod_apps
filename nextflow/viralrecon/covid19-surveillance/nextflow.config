/*
 * SARS-CoV-2 Surveillance Configuration for nf-core/viralrecon
 *
 * Hardcoded settings for public health laboratory use case
 * Optimized for Illumina amplicon sequencing with ARTIC primers
 */

params {
    // Reference genome - SARS-CoV-2 MN908947.3
    genome = 'MN908947.3'

    // Platform and protocol - hardcoded for Illumina amplicon
    platform = 'illumina'
    protocol = 'amplicon'

    // ARTIC primer scheme - commonly used version 3
    primer_set = 'artic'
    primer_set_version = 3

    // Skip assembly since we're using amplicon sequencing
    skip_assembly = true

    // Enable variant calling and consensus sequence generation
    skip_variants = false
    skip_consensus = false

    // Enable lineage analysis for surveillance
    skip_pangolin = false
    skip_nextclade = false

    // Variant calling parameters optimized for viral genomes
    ivar_trim_noprimer = false  // Remove primer sequences
    ivar_trim_min_len = 20      // Minimum read length after trimming
    ivar_trim_min_qual = 20     // Minimum base quality

    // Consensus sequence parameters
    min_mapped_reads = 1000     // Minimum reads for consensus calling
    consensus_caller = 'ivar'   // Use iVar for consensus generation

    // Variant frequency thresholds
    ivar_variants_min_freq = 0.25           // Report variants >= 25% frequency
    ivar_variants_min_depth = 10            // Minimum coverage depth
    ivar_variants_min_variant_qual = 20     // Minimum variant quality

    // Assembly quality thresholds
    min_allele_freq = 0.75      // Minimum allele frequency for consensus

    // MultiQC reporting
    multiqc_title = 'SARS-CoV-2 Surveillance Report'

    // Resource limits
    max_memory = '128.GB'
    max_cpus = 16
    max_time = '48.h'
}

// Process-specific resource configuration
process {
    // Variant calling processes
    withName: 'IVAR_VARIANTS' {
        cpus = { check_max( 4, 'cpus' ) }
        memory = { check_max( 8.GB * task.attempt, 'memory' ) }
        time = { check_max( 4.h * task.attempt, 'time' ) }
    }

    // Consensus sequence generation
    withName: 'IVAR_CONSENSUS' {
        cpus = { check_max( 2, 'cpus' ) }
        memory = { check_max( 4.GB * task.attempt, 'memory' ) }
        time = { check_max( 2.h * task.attempt, 'time' ) }
    }

    // Lineage analysis
    withName: 'PANGOLIN' {
        cpus = { check_max( 4, 'cpus' ) }
        memory = { check_max( 8.GB * task.attempt, 'memory' ) }
        time = { check_max( 4.h * task.attempt, 'time' ) }
    }

    withName: 'NEXTCLADE_RUN' {
        cpus = { check_max( 4, 'cpus' ) }
        memory = { check_max( 8.GB * task.attempt, 'memory' ) }
        time = { check_max( 4.h * task.attempt, 'time' ) }
    }
}

// Function to check maximum resources
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}