STATUS: BLOCKED - Requires Major Restructuring
Date: 2025-09-30
Tester: david40962

TESTING SUMMARY:
================
App Name: bacterial_genome_assembly
Pipeline: nf-core/bacass v2.3.1

TEST RESULTS:
- App Creation: FAILED - Validation error
- Pipeline Test: NOT ATTEMPTED - Cannot create app

ISSUES IDENTIFIED:

1. CRITICAL: Missing Required Field
   - Error: "API error: code=1, message=Validation failed"
   - Root cause: Missing `title` field in app.json
   - Fix applied: Added "title": "Nanoseq: Bacterial Genome Assembly"
   - Status: Fixed but not retested

2. CRITICAL: SSH Git Clone Dependency
   - Command uses: `git clone git@github.com:CamberCloud-Inc/prod_apps.git`
   - Requires SSH keys configured in execution environment
   - May not work on Camber platform without key setup
   - Should use HTTPS: `git clone https://github.com/CamberCloud-Inc/prod_apps.git`

3. MAJOR: Complex Bash Script Dependency
   - Command: `bash run_assembly.sh`
   - Script location: `prod_apps/nextflow/nanoseq/bacterial-genome-assembly/run_assembly.sh`
   - Script hard-codes parameters:
     * ASSEMBLER="dragonflye"
     * ASSEMBLY_TYPE="long"
     * FLYE_MODE="--nano-hq"
     * MIN_CONTIG_LENGTH="1000"
     * GENOME_SIZE="5000000"
   - Script expects samplesheet.csv in execution directory
   - Not transparent to users
   - Difficult to debug
   - Inconsistent with other app patterns

4. MODERATE: Parameter Inflexibility
   - Users cannot easily override hard-coded script parameters
   - Would need to modify script to change assembler settings
   - Does not follow declarative parameter pattern of other apps

ARCHITECTURAL CONCERNS:
- Three-layer abstraction (app.json → run_assembly.sh → nextflow)
- Configuration split across multiple files
- Script dependencies create maintenance burden
- SSH authentication requirement limits portability

CURRENT COMMAND STRUCTURE:
```bash
rm -rf prod_apps && \\
git clone git@github.com:CamberCloud-Inc/prod_apps.git && \\
cd ./prod_apps/nextflow/nanoseq/bacterial-genome-assembly/ && \\
bash run_assembly.sh
```

RECOMMENDED RESTRUCTURE:
```bash
nextflow run nf-core/bacass \\
  -r 2.3.1 \\
  --input ${input} \\
  --outdir ${outdir} \\
  --assembler ${assembler} \\
  --assembly_type ${assembly_type} \\
  --skip_kraken2 ${skip_kraken2} \\
  --skip_polish ${skip_polish} \\
  --min_contig_length ${min_contig_length} \\
  -c /etc/mpi/nextflow.camber.config \\
  -profile k8s \\
  -ansi-log false
```

BENEFITS OF RESTRUCTURE:
1. Direct nextflow execution (no script intermediary)
2. All parameters exposed to users via app.json spec
3. No git clone dependency
4. No SSH key requirement
5. Consistent with other app patterns
6. Easier to debug and maintain
7. More transparent to users

REQUIRED CHANGES:

1. Update app.json command to direct nextflow execution
2. Expose all parameters in spec section:
   - input (samplesheet)
   - outdir
   - assembler (dragonflye, unicycler, miniasm)
   - assembly_type (long, short, hybrid)
   - skip_kraken2 (boolean)
   - skip_polish (boolean)
   - min_contig_length (integer)
   - genome_size (integer, optional)
3. Remove run_assembly.sh dependency
4. Add parameter validation
5. Update documentation

PIPELINE DETAILS:
- Pipeline: nf-core/bacass v2.3.1
- Purpose: Bacterial genome assembly from ONT reads
- Assembler: Dragonflye (uses Flye for ONT)
- Expected input: CSV samplesheet with columns: ID, LongFastQ, GenomeSize
- Typical bacterial genome size: 5 Mb

TEST PARAMETERS (Once Fixed):
- Samplesheet: User-provided or test dataset
- Assembler: Dragonflye (Flye wrapper)
- Assembly type: Long reads only
- Genome size: 5,000,000 bp (typical bacteria)
- Skip Kraken2: true (for speed)
- Skip polishing: false (for quality)

BLOCKING ISSUES:
1. SSH git clone will likely fail without key configuration
2. Bash script approach non-standard and inflexible
3. Cannot test until major restructure completed

RECOMMENDATION:
- Do NOT deploy this app in current state
- Perform major restructure before any testing
- Follow patterns from successful CUT&RUN apps
- Simplify to direct nextflow execution
- Expose all parameters to users

PRIORITY: HIGH - Application completely blocked

NEXT STEPS:
1. Rewrite app.json with direct nextflow command
2. Remove run_assembly.sh dependency
3. Add all parameters to spec section
4. Update documentation
5. Test with nf-core/bacass test dataset
6. Verify assembly outputs
7. Check Prokka annotation (if enabled)

ESTIMATED EFFORT:
- Restructure: 1-2 hours
- Testing: 30-60 minutes
- Documentation: 30 minutes
- Total: 2-3 hours

FILES REQUIRING MODIFICATION:
- app.json: Complete command and spec rewrite
- Remove dependency: run_assembly.sh (or keep as documentation only)
- Add: Simplified configuration examples
