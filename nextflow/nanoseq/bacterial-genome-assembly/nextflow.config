/*
========================================================================================
    Bacterial Genome Assembly Configuration
========================================================================================
    Configuration for bacterial genome assembly from Oxford Nanopore data
    Uses nf-core/bacass pipeline optimized for bacterial isolate assembly
========================================================================================
*/

// Pipeline parameters
params {
    // Input/output
    input = null
    outdir = './results'

    // Assembly configuration - hardcoded for bacterial genomes
    assembler = 'dragonflye'  // Uses Flye for ONT data
    assembly_type = 'long'     // Long-read only assembly

    // Quality thresholds - hardcoded for high-quality assemblies
    skip_kraken2 = false
    skip_prokka = false
    prokka_args = ''

    // Dragonflye/Flye specific parameters
    flye_mode = 'nano-hq'      // For Q20+ ONT reads (default modern ONT)
    flye_min_overlap = null    // Auto-detect

    // Read filtering (hardcoded quality thresholds)
    save_trimmed_fail = false
    save_merged = false
    skip_adapter_trimming = false

    // QC and reporting
    skip_pycoqc = false

    // Resource limits
    max_cpus = 16
    max_memory = '60.GB'
    max_time = '48.h'
}

// Process configuration
process {
    // Error handling
    errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
    maxRetries = 1
    maxErrors = '-1'

    // Resource labels
    withLabel:process_single {
        cpus = 1
        memory = 6.GB
        time = 4.h
    }
    withLabel:process_low {
        cpus = 2
        memory = 12.GB
        time = 4.h
    }
    withLabel:process_medium {
        cpus = 6
        memory = 36.GB
        time = 8.h
    }
    withLabel:process_high {
        cpus = 12
        memory = 60.GB
        time = 16.h
    }
    withLabel:process_long {
        time = 20.h
    }
    withLabel:process_high_memory {
        memory = 100.GB
    }

    // Specific process configurations for bacterial assembly
    withName: 'NANOPLOT' {
        cpus = 2
        memory = 12.GB
        time = 2.h
    }

    withName: 'PORECHOP_PORECHOP' {
        cpus = 4
        memory = 30.GB
        time = 4.h
    }

    withName: 'DRAGONFLYE|FLYE' {
        cpus = { check_max( 12, 'cpus' ) }
        memory = { check_max( 60.GB, 'memory' ) }
        time = { check_max( 16.h, 'time' ) }
    }

    withName: 'MEDAKA' {
        cpus = 4
        memory = 36.GB
        time = 8.h
    }

    withName: 'PROKKA' {
        cpus = { check_max( 8, 'cpus' ) }
        memory = { check_max( 36.GB, 'memory' ) }
        time = { check_max( 4.h, 'time' ) }
    }

    withName: 'QUAST' {
        cpus = 2
        memory = 12.GB
        time = 2.h
    }

    withName: 'MULTIQC' {
        cpus = 1
        memory = 6.GB
        time = 1.h
    }
}

// Execution profiles
profiles {
    standard {
        process.executor = 'local'
    }

    docker {
        docker.enabled = true
        docker.userEmulation = true
        singularity.enabled = false
        podman.enabled = false
        shifter.enabled = false
        charliecloud.enabled = false
    }

    singularity {
        singularity.enabled = true
        singularity.autoMounts = true
        docker.enabled = false
        podman.enabled = false
        shifter.enabled = false
        charliecloud.enabled = false
    }

    test {
        params.input = 'test_samplesheet.csv'
        params.outdir = './test_results'
    }
}

// Export variables
env {
    PYTHONNOUSERSITE = 1
}

// Capture exit codes from upstream processes
process.shell = ['/bin/bash', '-euo', 'pipefail']

// Disable process selector warnings
nextflow.enable.configProcessNamesValidation = false

// Function to ensure that resource requirements don't go beyond maximum
def check_max(obj, String type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "ERROR: Max memory '${params.max_memory}' is not valid. Using default: ${obj}"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "ERROR: Max time '${params.max_time}' is not valid. Using default: ${obj}"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min(obj as int, params.max_cpus as int)
        } catch (all) {
            println "ERROR: Max cpus '${params.max_cpus}' is not valid. Using default: ${obj}"
            return obj
        }
    }
}

// Manifest
manifest {
    name = 'bacterial-genome-assembly'
    author = 'Camber Cloud'
    homePage = 'https://github.com/CamberCloud-Inc/prod_apps'
    description = 'Bacterial genome assembly from Oxford Nanopore long reads using Flye'
    mainScript = 'main.nf'
    nextflowVersion = '>=23.04.0'
    version = '1.0.0'
}

// Function to generate a timestamp
def trace_timestamp = new java.util.Date().format('yyyy-MM-dd_HH-mm-ss')

// Tracing and reporting
timeline {
    enabled = true
    file = "${params.outdir}/pipeline_info/execution_timeline_${trace_timestamp}.html"
}

report {
    enabled = true
    file = "${params.outdir}/pipeline_info/execution_report_${trace_timestamp}.html"
}

trace {
    enabled = true
    file = "${params.outdir}/pipeline_info/execution_trace_${trace_timestamp}.txt"
}

dag {
    enabled = true
    file = "${params.outdir}/pipeline_info/pipeline_dag_${trace_timestamp}.html"
}