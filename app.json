{
  "id": "432f5a9f-6c55-4c0c-81a2-bbc58f2eeebe",
  "name": "lammps",
  "title": "LAMMPS",
  "description": "It simulates a protein in electrolyte solution.",
  "content": "<h1 class=\"heading-node\">LAMMPS Molecular Dynamics Simulation</h1><p class=\"text-node\">This tutorial demonstrates how to run a <a class=\"link\" href=\"https://lammps.org/\" target=\"_blank\" rel=\"noopener\">LAMMPS</a> (Large-scale Atomic/Molecular Massively Parallel Simulator) molecular dynamics simulation using Camber. LAMMPS is a powerful tool for simulating the dynamics of atoms and molecules, commonly used for studying materials science, chemistry, and biological systems.</p><p class=\"text-node\">In this example, we’ll simulate a carbon nanotube structure using the “unbreakable” simulation setup, which demonstrates molecular dynamics of a complex carbon structure. The workflow includes:</p><ul class=\"list-node\"><li><p class=\"text-node\">Setting up and running the LAMMPS simulation</p></li><li><p class=\"text-node\">Creating interactive visualizations of the trajectory output</p></li></ul><h2 class=\"heading-node\">Import Camber Package</h2><p class=\"text-node\">First, we import the Camber package which provides the interface for running LAMMPS simulations on the cloud platform:</p><pre class=\"block-node\"><code class=\"language-python\">import camber</code></pre><h2 class=\"heading-node\">Configure and Submit LAMMPS Job</h2><p class=\"text-node\">Here we configure and submit a LAMMPS molecular dynamics job:</p><ul class=\"list-node\"><li><p class=\"text-node\"><code class=\"inline\" spellcheck=\"false\">command=\"lmp -in unbreakable.lmp\"</code>: Specifies the LAMMPS command to execute the input script</p></li><li><p class=\"text-node\"><code class=\"inline\" spellcheck=\"false\">engine_size=\"XSMALL\"</code>: Indicates the <a class=\"link\" href=\"https://docs.dev.camber.cloud/docs/engines-pricing/#cpu-engine-sizes\">engine size</a> for the simulation</p></li><li><p class=\"text-node\"><code class=\"inline\" spellcheck=\"false\">with_gpu=False</code>: Runs the simulation on CPU (set to True for GPU acceleration)</p></li></ul><p class=\"text-node\">The simulation uses these input files:</p><ul class=\"list-node\"><li><p class=\"text-node\"><code class=\"inline\" spellcheck=\"false\">unbreakable.lmp</code>: Main LAMMPS input script defining the simulation parameters</p></li><li><p class=\"text-node\"><code class=\"inline\" spellcheck=\"false\">unbreakable.data</code>: Initial molecular structure data for the carbon nanotube</p></li><li><p class=\"text-node\"><code class=\"inline\" spellcheck=\"false\">unbreakable.inc</code>: Include file with additional force field parameters</p></li></ul><pre class=\"block-node\"><code class=\"language-python\">lmp_job = camber.lammps.create_job(\n    command=\"lmp -in unbreakable.lmp\",\n    engine_size=\"XSMALL\",\n    with_gpu=False\n)</code></pre><h2 class=\"heading-node\">Check Job Status</h2><p class=\"text-node\">Monitor the <a class=\"link\" href=\"https://docs.dev.camber.cloud/docs/reference/job-attributes/#status\">job status</a> to track the simulation progress:</p><pre class=\"block-node\"><code class=\"language-python\">lmp_job.status</code></pre><h2 class=\"heading-node\">Monitor Job Execution</h2><p class=\"text-node\">To monitor job execution in real-time, use the <code class=\"inline\" spellcheck=\"false\">read_logs()</code> method to view the LAMMPS output and simulation progress (please, stand by patiently until the output appears):</p><pre class=\"block-node\"><code class=\"language-python\">lmp_job.read_logs()</code></pre><h2 class=\"heading-node\">Analyze and Visualize Trajectory</h2><p class=\"text-node\">Once the LAMMPS simulation is complete, we can analyze and visualize the molecular dynamics trajectory. This section:</p><ol class=\"list-node\"><li><p class=\"text-node\"><strong>Loads the trajectory</strong>: Uses MDAnalysis to read the LAMMPS trajectory file (<code class=\"inline\" spellcheck=\"false\">trajectory.lammpstrj</code>)</p></li><li><p class=\"text-node\"><strong>Processes molecular bonds</strong>: Attempts to identify chemical bonds between atoms for better visualization</p></li><li><p class=\"text-node\"><strong>Creates interactive visualization</strong>: Uses NGLView to display the molecular structure with playback controls</p></li><li><p class=\"text-node\"><strong>Adds user controls</strong>: Provides play/pause and frame slider widgets for exploring the dynamics</p></li></ol><p class=\"text-node\">The visualization shows the time evolution of the carbon nanotube structure during the molecular dynamics simulation:</p><pre class=\"block-node\"><code class=\"language-python\">import os\nimport MDAnalysis as mda\nimport nglview as nv\nimport ipywidgets as widgets\nfrom IPython.display import display\nimport numpy as np\n\nbase_path = os.getcwd()\nu = mda.Universe(os.path.join(base_path, \"trajectory.lammpstrj\"), format=\"LAMMPSDUMP\")\n\ntry:\n    from MDAnalysis.lib.distances import distance_array\n    positions = u.atoms.positions\n    distances = distance_array(positions, positions)\n    bond_pairs = [(i, j) for i in range(len(u.atoms)) for j in range(i+1, len(u.atoms)) if 1.2 &lt;= distances[i, j] &lt;= 1.8]\n    if bond_pairs:\n        u.add_TopologyAttr('bonds', np.array(bond_pairs))\nexcept:\n    try:\n        u.atoms.guess_bonds(vdwradii={'1': 2.0}, fudge_factor=0.8)\n    except:\n        pass\n\nview = nv.show_mdanalysis(u, step=1)\nview.clear_representations()\n\ntry:\n    if len(u.bonds) &gt; 0:\n        view.add_representation('ball+stick', selection='all', radius=0.05, bond_radius=0.05, color='hotpink')\n    else:\n        raise ValueError()\nexcept:\n    view.add_representation('licorice', selection='all', radius=0.1, color='hotpink')\n\nplay = widgets.Play(value=0, min=0, max=u.trajectory.n_frames-1, step=1, interval=10, description=\"▶️\")\nframe_slider = widgets.IntSlider(value=0, min=0, max=u.trajectory.n_frames-1, step=1, description='Frame:')\n\nwidgets.jslink((play, 'value'), (view, 'frame'))\nwidgets.jslink((frame_slider, 'value'), (view, 'frame'))\n\ndisplay(widgets.HBox([play, frame_slider]))\nview</code></pre>",
  "version": "1.0",
  "engineType": "LAMMPS",
  "command": "git clone https://github.com/CamberCloud-Inc/prod_apps.git && cd prod_apps && sh ./run_sim.sh $temperature",
  "imageUrl": "https://docs.dev.camber.cloud/demos/30-applications/03-molecular-dynamics/lammps/sim.gif",
  "spec": [
    {
      "label": "temperature",
      "name": "temperature",
      "description": "",
      "placeholder": "",
      "required": true,
      "disabled": false,
      "hidden": false,
      "type": "Input",
      "defaultValue": ""
    }
  ],
  "jobConfig": {
    "engineSize": "XSMALL",
    "numEngines": 1,
    "withGpu": false
  },
  "public": true,
  "anonymous": false,
  "createdAt": "2025-06-30T23:11:54Z",
  "updatedAt": "2025-07-01T00:12:46Z"
}